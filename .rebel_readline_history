1552072560308:(sorted-set)
1552072583577:(sorted-set 1 2 3)
1552072591830:((sorted-set 1 2 3) 3)
1552072600689:(dissoc (sorted-set 1 2 3) 3)
1552072638325:(disj (sorted-set 1 2 3) 3)
1552079804802:(into [] #{4 3 2})
1552079813032:(sort (into [] #{4 3 2}))
1552079903483:(->> #{4 3 2}\n     (into [])\n       (sort)\n       (first)))
1552079906402:(->> #{4 3 2}\n     (into [])\n       (sort)\n       (first))
1552080255080:(filter odd? #{1 2 3 4})
1552082022491:cljs/quit
1552269383326:(every 1000 (prn "hey"))
1552274888066:(seq #{1})
1552274890986:(seq #{})
1552275903385:(some? [])
1552276045344:(filter #(> % 2) #{1 3 4})
1552276053781:(seq (filter #(> % 2) #{1 3 4}))
1552276064395:(seq (filter #(> % 5\n                 \n                \n                 ) #{1 3 4}))
1552276259196:cljs/quit
1552276285673:quit/cljs
1552276287779:quit
1552276290575:cljs
1552276293127:cljs/quit
1552276518072:cljls/quit
1552276523812:cljs/quit
1552505621750:(range 1 11)
1552505731386:(parition 3 (range 1 13))
1552505747234:(partition 3 (range 1 13))
1552505817414:[200~(defn make-pannel [buttons]\n          (->> buttons\n                      ;(map floor-button)\n                      (partition 3)\n                      (map #([:div %]))))\n  )
1552505825588:(defn make-pannel [buttons]\n  (->> buttons\n       ;(map floor-button)\n       (partition 3)\n       (map #([:div %]))))
1552505836514:(make-panel (range 1 13))
1552505848826:(make-pannel (range 1 13))
1552505874914:(--> (range 1 13) (partition 3))
1552505893488:(->> (range 1 13) (partition 3))
1552505918100:(->> (range 1 13) (partition 3) (map #([:div %])))
1552505948727:(->> (range 1 13) (partition 3) (apply #([:div %])))
1552506017210:(->> (range 1 13)  (apply #([:div %])))
1552506027889:(->> (range 1 13)  (apply + )\n     )
1552506055038:(->> (range 1 13) (partition 3) (map  (fn [x] ([:div x])))\n     )
1552512690854:cljs/quit
